// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheComfortZone.SERVICES.DAO;

#nullable disable

namespace TheComfortZone.SERVICES.Migrations
{
    [DbContext(typeof(TheComfortZoneContext))]
    partial class TheComfortZoneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"), 1L, 1);

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AppointmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentTypeID");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("DesignerId")
                        .HasColumnType("int")
                        .HasColumnName("DesignerID");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentTypeId"), 1L, 1);

                    b.Property<byte[]>("Description")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AppointmentTypeId");

                    b.ToTable("AppointmentType", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int")
                        .HasColumnName("SpaceID");

                    b.HasKey("CategoryId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("DesignerId")
                        .HasColumnType("int")
                        .HasColumnName("DesignerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CollectionId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ColorId");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Designer", b =>
                {
                    b.Property<int>("DesignerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DesignerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignerId"), 1L, 1);

                    b.Property<float>("ConsultationPrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DesignerId");

                    b.ToTable("Designer", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavouriteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouriteId"), 1L, 1);

                    b.Property<int>("FurnitureItemId")
                        .HasColumnType("int")
                        .HasColumnName("FurnitureItemID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavouriteId");

                    b.HasIndex("FurnitureItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.FurnitureColor", b =>
                {
                    b.Property<int>("FurnitureColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FurnitureColorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureColorId"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    b.Property<int>("FurnitureItemId")
                        .HasColumnType("int")
                        .HasColumnName("FurnitureItemID");

                    b.HasKey("FurnitureColorId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FurnitureItemId");

                    b.ToTable("FurnitureColor", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", b =>
                {
                    b.Property<int>("FurnitureItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FurnitureItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureItemId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("CollectionID");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<float>("DiscountPrice")
                        .HasColumnType("real");

                    b.Property<bool?>("Favourited")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InStockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    b.Property<int>("MetricUnitId")
                        .HasColumnType("int")
                        .HasColumnName("MetricUnitID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("OnSale")
                        .HasColumnType("bit");

                    b.Property<float>("RegularPrice")
                        .HasColumnType("real");

                    b.Property<string>("State")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("FurnitureItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MetricUnitId");

                    b.ToTable("FurnitureItem", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("MaterialId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.MetricUnit", b =>
                {
                    b.Property<int>("MetricUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MetricUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetricUnitId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("MetricUnitId");

                    b.ToTable("MetricUnit", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("Noip")
                        .HasColumnType("int")
                        .HasColumnName("NOIP");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<bool?>("UsedDiscountCoupon")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FurnitureItemId")
                        .HasColumnType("int")
                        .HasColumnName("FurnitureItemID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("FurnitureItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Space", b =>
                {
                    b.Property<int>("SpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpaceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpaceId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("SpaceId");

                    b.ToTable("Space", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Appointment", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_18");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Designer", "Designer")
                        .WithMany("Appointments")
                        .HasForeignKey("DesignerId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_17");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "Employee")
                        .WithMany("AppointmentEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_REFERENCE_22");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "User")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_16");

                    b.Navigation("AppointmentType");

                    b.Navigation("Designer");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Category", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Space", "Space")
                        .WithMany("Categories")
                        .HasForeignKey("SpaceId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_2");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Collection", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Designer", "Designer")
                        .WithMany("Collections")
                        .HasForeignKey("DesignerId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_3");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Coupon", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_15");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Favourite", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", "FurnitureItem")
                        .WithMany("Favourites")
                        .HasForeignKey("FurnitureItemId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_13");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_14");

                    b.Navigation("FurnitureItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.FurnitureColor", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Color", "Color")
                        .WithMany("FurnitureColors")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_6");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", "FurnitureItem")
                        .WithMany("FurnitureColors")
                        .HasForeignKey("FurnitureItemId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_7");

                    b.Navigation("Color");

                    b.Navigation("FurnitureItem");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Category", "Category")
                        .WithMany("FurnitureItems")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_1");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Collection", "Collection")
                        .WithMany("FurnitureItems")
                        .HasForeignKey("CollectionId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_4");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Material", "Material")
                        .WithMany("FurnitureItems")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_5");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.MetricUnit", "MetricUnit")
                        .WithMany("FurnitureItems")
                        .HasForeignKey("MetricUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_19");

                    b.Navigation("Category");

                    b.Navigation("Collection");

                    b.Navigation("Material");

                    b.Navigation("MetricUnit");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Order", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "Employee")
                        .WithMany("OrderEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_REFERENCE_21");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.User", "User")
                        .WithMany("OrderUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_10");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.OrderItem", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", "FurnitureItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("FurnitureItemId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_11");

                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_12");

                    b.Navigation("FurnitureItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.User", b =>
                {
                    b.HasOne("TheComfortZone.SERVICES.DAO.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_REFERENCE_20");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Category", b =>
                {
                    b.Navigation("FurnitureItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Collection", b =>
                {
                    b.Navigation("FurnitureItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Color", b =>
                {
                    b.Navigation("FurnitureColors");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Designer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Collections");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.FurnitureItem", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("FurnitureColors");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Material", b =>
                {
                    b.Navigation("FurnitureItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.MetricUnit", b =>
                {
                    b.Navigation("FurnitureItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.Space", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("TheComfortZone.SERVICES.DAO.Model.User", b =>
                {
                    b.Navigation("AppointmentEmployees");

                    b.Navigation("AppointmentUsers");

                    b.Navigation("Coupons");

                    b.Navigation("Favourites");

                    b.Navigation("OrderEmployees");

                    b.Navigation("OrderUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
